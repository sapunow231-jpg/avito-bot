import asyncio
import requests
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder

API_TOKEN = "8385878027:AAEz6A6koSZ3mwvZkvt4xMGvCkIfdvR7FWA"
BASE_URL = "https://www.avito.ru/samarskaya_oblast"
HEADERS = {"User-Agent": "Mozilla/5.0"}

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è "–æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è"
watchlist = {}  # {user_id: {query: [—Å—Å—ã–ª–∫–∏_–æ–±—ä—è–≤–ª–µ–Ω–∏–π]}}


def get_avito_results(query: str, limit: int = 5):
    """–ü–∞—Ä—Å–∏—Ç –ø–µ—Ä–≤—ã–µ limit –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –°–∞–º–∞—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"""
    url = f"{BASE_URL}?q={query.replace(' ', '+')}"
    r = requests.get(url, headers=HEADERS)
    soup = BeautifulSoup(r.text, "html.parser")

    items = []
    for ad in soup.select('div[itemtype="http://schema.org/Product"]')[:limit]:
        title = ad.select_one("h3")
        link_tag = ad.select_one("a")
        price_tag = ad.select_one('meta[itemprop="price"]')
        img_tag = ad.select_one("img")

        if not (title and link_tag):
            continue

        title_text = title.get_text(strip=True)
        link = "https://www.avito.ru" + link_tag["href"]
        price = price_tag["content"] + " ‚ÇΩ" if price_tag else "–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        img = img_tag["src"] if img_tag else None
        items.append({"title": title_text, "price": price, "link": link, "img": img})
    return items


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ê–≤–∏—Ç–æ (–°–∞–º–∞—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å).\n"
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ, —á—Ç–æ –∏—Å–∫–∞—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä: `–≤–µ–ª–æ—Å–∏–ø–µ–¥` –∏–ª–∏ `iPhone 13`.",
        parse_mode="Markdown"
    )


@dp.message()
async def handle_query(message: types.Message):
    query = message.text.strip()
    results = get_avito_results(query)

    if not results:
        await message.answer("üòî –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    builder = InlineKeyboardBuilder()
    builder.button(text="üîî –°–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏–º –∑–∞–ø—Ä–æ—Å–æ–º", callback_data=f"watch:{query}")
    builder.adjust(1)

    await message.answer(f"üîé –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É: *{query}*", parse_mode="Markdown")

    for item in results:
        caption = f"**{item['title']}**\n{item['price']}\nüëâ [–û—Ç–∫—Ä—ã—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({item['link']})"
        if item["img"]:
            await message.answer_photo(item["img"], caption=caption, parse_mode="Markdown")
        else:
            await message.answer(caption, parse_mode="Markdown")

    await message.answer("–•–æ—á–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏?", reply_markup=builder.as_markup())


@dp.callback_query(lambda c: c.data.startswith("watch:"))
async def watch_query(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    query = callback.data.split(":", 1)[1]

    if user_id not in watchlist:
        watchlist[user_id] = {}
    watchlist[user_id][query] = [item["link"] for item in get_avito_results(query, 10)]

    await callback.message.answer(f"‚úÖ –¢–µ–ø–µ—Ä—å —è —Å–ª–µ–∂—É –∑–∞ –∑–∞–ø—Ä–æ—Å–æ–º: *{query}*", parse_mode="Markdown")
    await callback.answer()


async def watch_loop():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"""
    while True:
        await asyncio.sleep(300)
        for user_id, queries in watchlist.items():
            for query, old_links in queries.items():
                new_ads = get_avito_results(query, 10)
                new_items = [ad for ad in new_ads if ad["link"] not in old_links]

                if new_items:
                    text = f"üÜï –ù–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ –∑–∞–ø—Ä–æ—Å—É *{query}*:"
                    await bot.send_message(user_id, text, parse_mode="Markdown")
                    for item in new_items:
                        caption = f"**{item['title']}**\n{item['price']}\nüëâ [–°–º–æ—Ç—Ä–µ—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ]({item['link']})"
                        if item["img"]:
                            await bot.send_photo(user_id, item["img"], caption=caption, parse_mode="Markdown")
                        else:
                            await bot.send_message(user_id, caption, parse_mode="Markdown")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
                    watchlist[user_id][query] = [ad["link"] for ad in new_ads]


async def main():
    asyncio.create_task(watch_loop())
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
